#+title: My Doom Emacs configurations
#+startup: hideblocks content
#+filetags: :compilation:tool:blogs:
#+date: {{{modification-time(%Y-%m-%d)}}}
#+latex_class: koma-article
#+latex_header: \usepackage{parskip}
#+latex_header_extra: \usepackage{AlegreyaSans}
#+latex_header_extra: \usepackage{libertine}
#+latex_header_extra: \usepackage{newtxmath}
#+latex_header_extra: \usepackage[scale=0.80]{FiraMono}
#+latex_header_extra: \addtokomafont{subsubsection}{\color{RoyalBlue!50!black}\AlegreyaSansMedium}
#+latex_header_extra: \urlstyle{sf}
#+latex_engraved_theme: doom-gruvbox-light
#+export_file_name: Doom-Emacs-config.md
#+hugo_base_dir: ~/org/blog/
#+hugo_section: ./resources/
#+hugo_tags: Emacs
#+hugo_url: /Doom-Emacs-config
#+hugo_slug: Doom-Emacs-config
#+hugo_custom_front_matter:
#+hugo_draft: false
#+options: toc:5 num:t H:5

*  Introduction :ignore:
This document describes how I set up my Emacs, in [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style, using a plain text format closely related to Emacs called [[https://orgmode.org/][Org-mode]].
The whole thing is contained in a single file, from which both elisp code and document is genreated.
This Emacs configuration is built based on a configuration framework
called [[https://github.com/doomemacs/][Doom Emacs]], hence the name of
this document.

* Fundamental setups
** Personal Information and good defaults
Personal information, org directory and dashboard banner settings.
#+begin_src emacs-lisp
(setq user-full-name "Wang Hui"
      user-mail-address "wanghui10a@outlook.com"
      +doom-dashboard-banner-dir doom-user-dir
      +doom-dashboard-banner-file "dash.png"
      +doom-dashboard-banner-padding '(0 . 2)
      pixel-scroll-precision-mode t)
#+end_src

Start Doom with appropriate size
#+begin_src elisp
(add-to-list 'default-frame-alist '(width . 95))
(add-to-list 'default-frame-alist '(height . 35))
#+end_src

Better Defaults
#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
(remove-hook! '(text-mode-hook) #'display-line-numbers-mode)

;; It's handy to be asked which buffer  I want
(setq evil-vsplit-window-right t
      evil-split-window-below t)
;; then pull a prompt
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

* Appearance Settings
** Fonts and theme settings
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 28)
      doom-big-font (font-spec :family "Iosevka" :size 30)
      doom-variable-pitch-font (font-spec :family "Georgia" :size 28)
      ;;doom-unicode-font (font-spec :family "JuliaMono")
      )
(setq line-spacing 0.2)
(add-hook 'doom-init-ui-hook (lambda ()
                               (progn
                                 (set-fontset-font t '(#x4e00 . #x9fff) (font-spec :family "FZShuSong-Z01"))
                                 ())
                               ))

(add-hook 'after-change-major-mode-hook (lambda ()
                                          (global-prettify-symbols-mode -1)))

(setq doom-theme 'doom-acario-light)
#+end_src
Here is a mixed pitch settings.
    #+begin_src emacs-lisp
;; Mixed pitch
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)

(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(defface variable-pitch-serif
    '((t (:family "overpass")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)

(defcustom variable-pitch-serif-font (font-spec :family "overpass")
  "The font face used for `variable-pitch-serif'."
  :group 'basic-faces
  :set (lambda (symbol value)
         (set-face-attribute 'variable-pitch-serif nil :font value)
         (set-default-toplevel-value symbol value)))

(after! mixed-pitch
  (setq mixed-pitch-set-height t)
  (setq! variable-pitch-serif-font (font-spec :family "Georgia" :size 28 ))
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))

#+end_src


Below is configuration for writting room. Configuration includes:
1) Use a serifed variable-pitch font
2) Hiding headline leading stars
3) Using fleurons as headline bullets
4) Hiding line number
5) Removing outline indentation
6) Centering text
#+begin_src emacs-lisp 
(setq +zen-text-scale 0.8)

(defvar +zen-serif-p t
  "Whether to use a serifed font with `mixed-pitch-mode'.")
(defvar +zen-org-starhide t
  "The value `org-modern-hide-stars' is set to.")

(after! writeroom-mode
  (defvar-local +zen--original-org-indent-mode-p nil)
  (defvar-local +zen--original-mixed-pitch-mode-p nil)
  (defun +zen-enable-mixed-pitch-mode-h ()
    "Enable `mixed-pitch-mode' when in `+zen-mixed-pitch-modes'."
    (when (apply #'derived-mode-p +zen-mixed-pitch-modes)
      (if writeroom-mode
          (progn
            (setq +zen--original-mixed-pitch-mode-p mixed-pitch-mode)
            (funcall (if +zen-serif-p #'mixed-pitch-serif-mode #'mixed-pitch-mode) 1))
        (funcall #'mixed-pitch-mode (if +zen--original-mixed-pitch-mode-p 1 -1)))))

  (defun +zen-prose-org-h ()
    "Reformat the current Org buffer appearance for prose."
    (when (eq major-mode 'org-mode)
      (setq display-line-numbers nil
            visual-fill-column-width 60
            org-adapt-indentation nil)
      (when (featurep 'org-modern)
        (setq-local org-modern-hide-stars +zen-org-starhide)
        (org-modern-mode -1)
        (org-modern-mode 1))
      (setq
       +zen--original-org-indent-mode-p org-indent-mode)
      (org-indent-mode -1)))

  (defun +zen-nonprose-org-h ()
    "Reverse the effect of `+zen-prose-org'."
    (when (eq major-mode 'org-mode)
      (when (bound-and-true-p org-modern-mode)
        (org-modern-mode -1)
        (org-modern-mode 1))
      (when +zen--original-org-indent-mode-p (org-indent-mode 1))))
  (pushnew! writeroom--local-variables
            'display-line-numbers
            'visual-fill-column-width
            'org-adapt-indentation
            'org-modern-mode
            'org-modern-star
            'org-modern-hide-stars)
  (add-hook 'writeroom-mode-enable-hook #'+zen-prose-org-h)
  (add-hook 'writeroom-mode-disable-hook #'+zen-nonprose-org-h))
#+end_src

** Dashboard configuration
Modify the keymap in dashboard.
#+begin_src emacs-lisp
(defun +doom-dashboard-setup-modified-keymap ()
  (setq +doom-dashboard-mode-map (make-sparse-keymap))
  (map! :map +doom-dashboard-mode-map
        :desc "Find file" :ng "f" #'find-file
        :desc "Recent files" :ng "r" #'consult-recent-file
        :desc "Config dir" :ng "c" #'doom/open-private-config
        :desc "Notes (roam)" :ng "n" #'org-roam-node-find
        :desc "Switch buffer" :ng "b" #'+vertico/switch-workspace-buffer
        :desc "Switch buffers (all)" :ng "B" #'consult-buffer
        :desc "Previous buffer" :ng "p" #'previous-buffer
        :desc "Set theme" :ng "t" #'consult-theme
        :desc "Quit" :ng "Q" #'save-buffers-kill-terminal
        :desc "Show keybindings" :ng "h" (cmd! (which-key-show-keymap '+doom-dashboard-mode-map))))

(add-transient-hook! #'+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap))
(add-transient-hook! #'+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap))
(add-hook! 'doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap))
#+end_src
Show benchmark time on Dashboard and don't show benchmark time in minibuffer.
#+begin_src emacs-lisp
(defun +doom-dashboard-benchmark-line ()
  "Insert the load time line."
  (when doom-init-time
    (insert
     "\n\n"
     (propertize
      (+doom-dashboard--center
       +doom-dashboard--width
       (doom-display-benchmark-h 'return))
      'face 'doom-dashboard-loaded)
     "\n")))
(remove-hook 'doom-after-init-hook #'doom-display-benchmark-h)
#+end_src

A funny dashboard-widget-footer
#+begin_src emacs-lisp
(defun +doom-dashboard-widget-footer ()
  (insert
   (+doom-dashboard--center
    (- +doom-dashboard--width 2)
    (with-temp-buffer
      (insert-text-button (all-the-icons-alltheicon "atom" :face 'all-the-icons-lred :height 2.0 :v-adjust -0.3)
                          'follow-link t
                          'help-echo "Go to the hell, Bitch!")
      (buffer-string)))
   "\n"))
#+end_src
Create the desired dashboard by setting `doom-dashboard-functions`
#+begin_src emacs-lisp
(setq +doom-dashboard-functions
      (list #'doom-dashboard-widget-banner
            #'+doom-dashboard-benchmark-line
            #'+doom-dashboard-widget-footer))

(defun +doom-dashboard-tweak (&optional _)
  (with-current-buffer (get-buffer +doom-dashboard-name)
    (setq-local line-spacing 0.2
                mode-line-format nil
                evil-normal-state-cursor (list nil))))

(add-hook '+doom-dashboard-mode-hook #'+doom-dashboard-tweak)
#+end_src

** Modeline Tweak
Show Battery status and Time. Adjust `doom-mode-line-height`.
#+begin_src emacs-lisp
(setq doom-modeline-height 30)
(display-time-mode 1)
(display-battery-mode 1)
#+end_src
Show page number when viewing PDFS.
#+begin_src emacs-lisp
(require 'doom-modeline-core)
(doom-modeline-def-segment buffer-name
  "Display the current buffer's name, without any other information."
  (concat
   doom-modeline-spc
   (doom-modeline--buffer-name)))

(doom-modeline-def-segment pdf-icon
  "PDF icon from all-the-icons."
  (concat
   doom-modeline-spc
   (doom-modeline-icon 'material "picture_as_pdf" nil nil
                       :face (if (doom-modeline--active)
                                 'all-the-icons-red
                               'mode-line-inactive))))

(defun doom-modeline-update-pdf-pages ()
  "Update PDF pages."
  (setq doom-modeline--pdf-pages
        (let ((current-page-str (number-to-string (eval
                                                   `(pdf-view-current-page))))
              (total-page-str (number-to-string
                               (pdf-cache-number-of-pages))))
          (concat
           (propertize
            (concat (make-string (- (length total-page-str) (length
                                                             current-page-str)) ? )
                    " P" current-page-str)
            'face 'mode-line)
           (propertize (concat "/" total-page-str) 'face
                       'doom-modeline-buffer-minor-mode)))))

(doom-modeline-def-segment pdf-pages
  "Display PDF pages."
  (if (doom-modeline--active) doom-modeline--pdf-pages
    (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

(doom-modeline-def-modeline 'pdf
  '(pdf-pages pdf-icon buffer-name))
#+end_src
** Narrowing and centering buffer contents
On large screen, the buffer content will not exceed a certain width and will be centered.
#+begin_src emacs-lisp
(use-package! olivetti
  :config
  (setq-default olivetti-body-width 130)
  (add-hook 'mixed-pitch-mode-hook  (lambda () (setq-local
olivetti-body-width 85))))

(use-package! auto-olivetti
  :custom
  (auto-olivetti-enabled-modes '(text-mode prog-mode helpful-mode))
  :config
  (auto-olivetti-mode))
#+end_src
* Editing and Function configuration
** String inflection
This package lets you cycle through the different forms (underscore -> UPCASE -> CamelCase conversion of names) of a string.
#+begin_src emacs-lisp
(use-package! string-inflection
  :commands (string-inflection-all-cycle
             string-inflection-python-style-cycle)
  :init
  (defun my-string-inflection-cycle-auto ()
    "switching by major-mode"
    (interactive)
    (cond
     ;; for emacs-lisp-mode
     ((eq major-mode 'emacs-lisp-mode)
      (string-inflection-all-cycle))
     ;; for python
     ((eq major-mode 'python-mode)
      (message "python")
      (string-inflection-python-style-cycle))
     (t
      ;; default
      (string-inflection-ruby-style-cycle))))

  (map! :leader :prefix ("z" . "naming convention")
        :desc "cycle execute" :n "c" #'my-string-inflection-cycle-auto)
  )
#+end_src
** Ligatures
Just a copy, because I don't understand the meaning of ligatures.
#+begin_src emacs-lisp
;; For Iosevka
(set-char-table-range composition-function-table ?+ '(["\\(?:++++\\)" 0 font-shape-gstring]))
;; For Alegreya/Alegreya Sans
(set-char-table-range composition-function-table ?f '(["\\(?:ff?[fijltkbh]\\)" 0 font-shape-gstring]))
;; (set-char-table-range composition-function-table ?T '(["\\(?:Th\\)" 0 font-shape-gstring]))
#+end_src

** Completion settings
Return to company.
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))

(setq-default history-length 1000)
(setq-default prescient-history-length 1000)

(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))

#+end_src
** Smart parentheses
Enable `<< >>` in org-mode
#+begin_src emacs-lisp
(sp-local-pair
 '(org-mode)
 "<<" ">>"
 :actions '(insert))
#+end_src

** Dictionary configuration
#+begin_src emacs-lisp
(setq ispell-dictionary "en-custom"
      ispell-complete-word-dict "en-custom")
#+end_src
** Language server protocol
#+begin_src emacs-lisp
(use-package! lsp-ui
  :config
  (setq lsp-ui-doc-delay 2
        lsp-ui-doc-max-width 80)
  (setq lsp-signature-function 'lsp-signature-posframe))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package! yasnippet
  :config
  ;; It will test whether it can expand, if yes, change cursor color
  (defun hp/change-cursor-color-if-yasnippet-can-fire (&optional field)
    (interactive)
    (setq yas--condition-cache-timestamp (current-time))
    (let (templates-and-pos)
      (unless (and yas-expand-only-for-last-commands
                   (not (member last-command
yas-expand-only-for-last-commands)))
        (setq templates-and-pos (if field
                                    (save-restriction
                                      (narrow-to-region (yas--field-start field)
                                                        (yas--field-end field))
                                      (yas--templates-for-key-at-point))
                                  (yas--templates-for-key-at-point))))
      (set-cursor-color (if (and templates-and-pos (first templates-and-pos)
                                 (eq evil-state 'insert))
                            (doom-color 'red)
                          (face-attribute 'default :foreground)))))
  :hook (post-command . hp/change-cursor-color-if-yasnippet-can-fire))
#+end_src
** Citations
`Citar` is a package that provide front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and support org-cite editing.
#+begin_src emacs-lisp
(use-package! citar
  :hook
  (LaTeX-mode . citar-capf-setup)
  (org-mode . citar-capf-setup)
  :config
  (setq citar-bibliography (list (concat org-directory "/References/Zotero.bib"))
        citar-notes-paths (list (concat org-directory "/Org-roam/literature/"))
        citar-library-paths (list (concat org-directory "/Org-roam/"))
        citar-file-variable "file"
        citar-symbols
        `((file ,(all-the-icons-faicon "file-pdf-o" :face 'all-the-icons-red
                                       :v-adjust -0.1) . " ")
          (note ,(all-the-icons-material "speaker_notes" :face
                                         'all-the-icons-blue :v-adjust -0.3) . " ")
          (link ,(all-the-icons-material "link" :face 'all-the-icons-blue) . " "))
        citar-symbol-seperator "  "
        org-cite-global-bibliography citar-bibliography
        )
  (after! (embark pdf-occur)
    (defun citar/search-pdf-contents (keys-entries &optional str)
      "Search pdfs."
      (interactive (list (citar-select-refs)))
      (let ((files (citar-file--files-for-multiple-entries
                    (citar--ensure-entries keys-entries)
                    citar-library-paths
                    '("pdf")))
            (search-str (or str (read-string "Search string: "))))
        (pdf-occur-search files search-str t)))
    ;; with this, you can exploit embark's multitarget actions, so that you can run `embark-act-all`
    (add-to-list 'embark-multitarget-actions
                 #'citar/search-pdf-contents)))
(after! oc-csl
  (setq org-cite-csl-styles-dir "~/Zotero/styles/"))

(after! oc
  (setq org-cite-export-processors '((t csl))))

(map! :after org
      :map org-mode-map
      :localleader
      :desc "Insert citation" "@" #'org-cite-insert)
#+end_src
** Embark consult
#+begin_src emacs-lisp
(use-package! embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** Email client
#+begin_src emacs-lisp
;; Mail client
(setq mue4e-headers-skip-duplicates t
      mu4e-view-show-images nil
      mu4e-view-show-addresses t
      mu4e-compose-format-flowed nil
      mu4e-date-format "%y/%m/%d"
      mu4e-headers-date-format "%Y/%m/%d"
      mu4e-change-filenames-when-moving t
      mu4e-attachments-dir "~/Downloads"
      mu4e-maildir       "~/.mail"   ;; top-level Maildir
      ;; note that these folders below must start with /
      ;; the paths are relative to maildir root
      mu4e-refile-folder "/Archive"
      mu4e-sent-folder   "/Sent"
      mu4e-drafts-folder "/Drafts"
      mu4e-trash-folder  "/Trash")

;; this setting allows to re-sync and re-index mail
;; by pressing U
(setq mu4e-get-mail-command  "mbsync -a"
      mu4e-update-interval 300)

(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server  "smtp.office365.com"
      smtpmail-smtp-service 587
      ;; smtpmail-auth-credentials (())
      smtpmail-auth-credentials "~/.authinfo.gpg"
      smtpmail-stream-type  'starttls)

(after! auth-source
  (setq auth-sources (nreverse auth-sources)))

#+end_src
** Miscellaneous
#+begin_src emacs-lisp
(use-package! pdf-occur)

;; Prettier page line breaks
(use-package! page-break-lines
  :commands page-break-lines-mode
  :init
  (autoload 'turn-on-page-break-lines-mode "page-break-lines")
  :config
  (setq page-break-lines-max-width fill-column)
  (map! :prefix "g"
        :desc "Prev page break" :nv "[" #'backward-page
        :desc "Next page break" :nv "]" #'forward-page))
#+end_src
* Major modes and language-specific configurations
** General Settings
Register some file templates.
#+begin_src emacs-lisp 
(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
(set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)
#+end_src

Show ANSI colour in plain text without disrupt org src blocks
#+begin_src emacs-lisp 
(after! text-mode
  (add-hook! 'text-mode-hook
    (unless (derived-mode-p 'org-mode)
      ;; Apply ANSI color codes
      (with-silent-modifications
        (ansi-color-apply-on-region (point-min) (point-max) t)))))
#+end_src

Remove line number and strip away paddings.
#+begin_src emacs-lisp
(defvar +text-mode-left-margin-width 1
  "The `left-margin-width' to be used in `text-mode' buffers.")

(defun +setup-text-mode-left-margin ()
  (when (and (derived-mode-p 'text-mode)
             (not (and (bound-and-true-p visual-fill-column-mode)
                       visual-fill-column-center-text))
             (eq (current-buffer) ; Check current buffer is active.
                 (window-buffer (frame-selected-window))))
    (setq left-margin-width (if display-line-numbers
                                0 +text-mode-left-margin-width))
    (set-window-buffer (get-buffer-window (current-buffer))
                       (current-buffer))))

(add-hook 'window-configuration-change-hook #'+setup-text-mode-left-margin)
(add-hook 'display-line-numbers-mode-hook #'+setup-text-mode-left-margin)
(add-hook 'text-mode-hook #'+setup-text-mode-left-margin)

(defadvice! +doom/toggle-line-numbers--call-hook-a ()
  :after #'doom/toggle-line-numbers
  (run-hooks 'display-line-numbers-mode-hook))

(remove-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src
** Org-mode
*** Basic configuration tweak
#+begin_src emacs-lisp
(setq org-directory (expand-file-name "org" "/User/wanghui")
      org-use-property-inheritance t
      org-list-allow-alphabetical t
      org-fold-invisible-edits 'smart
      org-log-done 'time
      org-export-with-sub-superscripts '{}
      org-export-allow-bind-keywords t
      org-imge-actual-width '(0.9))

(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link")))

(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)

(map! :map evil-org-mode-map
      :after evil-org
      :n "g <up>" #'org-backward-heading-same-level
      :n "g <down>" #'org-forward-heading-same-level
      :n "g <left>" #'org-up-element
      :n "g <right>" #'org-down-element)

;; The utility of zero-width spaces
(map! :map org-mode-map
      :nie "M-SPC M-SPC" (cmd! (insert "\u200B")))

;; Then stop the space from being included in exports
(defun +org-export-remove-zero-width-space (text _backend _info)
  "Remove zero width spaces form TEXT"
  (unless (org-export-derived-backend-p 'org)
    (replace-regexp-in-string "\u200B" "" text)))

(after! ox
  (add-to-list 'org-export-filter-final-output-functions
               #'+org-export-remove-zero-width-space t))

;; Easier file links: have a way to skip straight to file
;; and avoid description prompt
(defun +org-insert-file-link ()
  "Insert a file link.  At the prompt, enter the filename."
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))

(map! :after org
      :map org-mode-map
      :localleader
      "l f " #'+org-insert-file-link)
#+end_src
*** Org-cite
`oc-csl-activate` can render org-cite in a particular format
More info see [[https://github.com/andras-simonyi/org-cite-csl-activate][Description of org-cite-csl-activate]]
#+begin_src emacs-lisp
(use-package! oc-csl-activate
  :after oc
  :config
  (setq org-cite-csl-activate-use-document-style t)
  (defun +org-cite-csl-activate/enable ()
    (interactive)
    (setq org-cite-activate-processor 'csl-activate)
    (add-hook! 'org-mode-hook '((lambda () (cursor-sensor-mode 1)) org-cite-csl-activate-render-all))
    (defadvice! +org-cite-csl-activate-render-all-silent (orig-fn)
      :around #'org-cite-csl-activate-render-all
      (with-silent-modifications (funcall orig-fn)))
    (when (eq major-mode 'org-mode)
      (with-silent-modifications
        (save-excursion
          (goto-char (point-min))
          (org-cite-activate (point-max)))
        (org-cite-csl-activate-render-all)))
    (fmakunbound #'+org-cite-csl-activate/enable)))
#+end_src
*** Org-tempo
Org Tempo expands snippets to structures defined in org-structure-template-alist
and org-tempo-keywords-alist. For example, < s TAB creates a code block.
Available structure are defined in `org-structure-template-alist`. Here we
define Hugo shortcodes.
#+begin_src emacs-lisp
(use-package! org-tempo
  :after org
  :config
  ;;Hugo shortcodes
  (tempo-define-template
   "Hugo info" '("#+attr_shortcode: info\n#+begin_notice\n" p "\n#+end_notice">)
   "<info")
  (tempo-define-template
   "Hugo tip" '("#+attr_shortcode:tip\n#+begin_notice\n" p "\n#+end_notice">)
   "<tip")
  (tempo-define-template
   "Hugo warning" '("#+attr_shortcode: warning\n#+begin_notice\n" p "\n#+end_notice">)
   "<warning")
  (tempo-define-template
   "Hugo error" '("#+attr_shortcode: error\n#+begin_notice\n" p "\n#+end_notice">)
   "<error")
  (tempo-define-template
   "Hugo example" '("#+attr_shortcode: example\n#+begin_notice\n" p "\n#+end_notice">)
   "<example")
  (tempo-define-template
   "Hugo question" '("#+attr_shortcode: question\n#+begin_notice\n" p "\n#+end_notice">)
   "<question")
  )
#+end_src

*** Visual related configuration
#+begin_src emacs-lisp
;; Change how LaTeX and image are shown
(setq org-highlight-latex-and-related '(native entities script)
        org-image-actual-width (min (/ (display-pixel-width) 3) 800))
(add-hook 'org-mode-hook #'+org-pretty-mode)

;; Let's make headings a bit bigger and the same with title

(custom-set-faces!
  '(outline-1 :weight bold)
  ;;'(org-level-1 :weight extra-bold :height 1.2)
  '(outline-2 :weight bold)
  '(outline-3 :weight bold)
  ;; '(outline-4 :weight semi-bold :height 1.08)
  ;; '(outline-5 :weight semi-bold :height 1.05)
  ;; '(outline-6 :weight semi-bold :height 1.02)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))

(custom-set-faces!
  '(org-document-title :height 1.2))
#+end_src
*** Org-modern and svg-tag-mode
`Org-modern` is really cool -- especially when combined with `svg-tag-mode`. The
combined method is disable some modules in `Org-modern` like `org-modern-todo`,
`org-modern-tag`, and replace them with svg-tag
#+begin_src emacs-lisp
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq
   ;; Edit settings
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t
   ;; Appearance
   org-pretty-entities t
   org-modern-radio-target    '("❰" t "❱")
   org-modern-internal-target '("↪ " t "")
   org-modern-todo nil
   org-modern-tag nil
   org-modern-timestamp t
   org-modern-statistics nil
   org-modern-progress nil
   org-modern-priority nil
   org-modern-table nil
   org-modern-horizontal-rule "──────────"
   org-modern-hide-stars "·"
   org-modern-star ["⁖"]
   org-modern-keyword "‣"
   org-modern-list '((43 . "•")
                     (45 . "–")
                     (42 . "∘")))
  (custom-set-faces!
    `((org-modern-tag)
      :background ,(doom-blend (doom-color 'blue) (doom-color 'bg) 0.1)
      :foreground ,(doom-color 'grey))
    `((org-modern-radio-target org-modern-internal-target)
      :inherit 'default :foreground ,(doom-color 'blue)))
)
#+end_src
The configuration for `svg-tag-mode`
#+begin_src emacs-lisp
(use-package! svg-tag-mode
  :config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (svg-image (svg-lib-concat
                (svg-lib-progress-bar
                 (/ (string-to-number value) 100.0) nil
                 :height 0.5 :foreground (doom-color 'fg) :background (doom-color 'bg)
                 :margin 0 :stroke 2 :radius 3 :padding 2 :width 8)
                (svg-lib-tag (concat value "%") nil
                             :height 0.5 :foreground (doom-color 'fg) :background "Transparent"
                             :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
    (let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :foreground (doom-color 'fg)
                                        :background (doom-color 'bg) :height 0.5
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 8)
                  (svg-lib-tag value nil
                               :foreground (doom-color 'fg)
                               :background "Transparent"
                               :stroke 0 :margin 0 :height 0.5)) :ascent 'center)))

  ;;(plist-put svg-lib-style-default :font-family "Alegreya")
  (plist-put svg-lib-style-default :font-size 7)


  ;;(set-face-attribute 'svg-tag-default-face nil :family "Alegreya Sans")
  (setq svg-tag-tags
        `(;; Progress e.g. [63%] or [10/15]
          ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                              (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                            (svg-progress-count (substring tag 1 -1)))))
          ;; Task priority e.g. [#A], [#B], or [#C]
          ("\\[#A\\]" . ((lambda (tag) (svg-tag-make tag :face 'error :inverse t :height 0.55
                                                     :beg 2 :end -1 :margin 0 :radius 10))))
          ("\\[#B\\]" . ((lambda (tag) (svg-tag-make tag :face 'warning :inverse t :height 0.55
                                                     :beg 2 :end -1 :margin 0 :radius 10))))
          ("\\[#C\\]" . ((lambda (tag) (svg-tag-make tag :face 'org-todo :inverse t :height 0.55
                                                     :beg 2 :end -1 :margin 0 :radius 10))))
          ;; Keywords
          ("TODO" . ((lambda (tag) (svg-tag-make tag :inverse t :height 0.55 :face 'org-todo))))
          ("HOLD" . ((lambda (tag) (svg-tag-make tag :height 0.55 :face 'org-todo))))
          ("DONE\\|STOP" . ((lambda (tag) (svg-tag-make tag :inverse t :height 0.55 :face 'org-done))))
          ("NEXT\\|WAIT" . ((lambda (tag) (svg-tag-make tag :inverse t :height 0.55 :face '+org-todo-active))))
          ("CANCEL" . ((lambda (tag) (svg-tag-make tag :inverse t :height 0.55 :face '+org-todo-cancel))))
          ("REPEAT\\|EVENT\\|PROJ\\|IDEA" .
           ((lambda (tag) (svg-tag-make tag :inverse t :height 0.55 :face '+org-todo-project))))
          ("REVIEW" . ((lambda (tag) (svg-tag-make tag :inverse t :height 0.55 :face '+org-todo-onhold))))))

  :hook (org-mode . svg-tag-mode)
  )
#+end_src
***  Org-appear
#+begin_src emacs-lisp
(use-package! org-appear
  :hook
  (org-mode . org-appear-mode)
  :config
  (setq org-hide-emphasis-markers t
        org-appear-autosubmarkers t
        org-appear-autoemphasis t
        org-appear-autolinks 'nil))

#+end_src
***  Org-LaTeX Preview
Choose `dvisvgm` as  supported backends for creating previews.
#+begin_src emacs-lisp
(if (string-match-p "RSVG" system-configuration-features)
    (setq org-latex-preview-default-process 'dvisvgm)
    (setq org-latex-preview-default-process 'dvipng))
#+end_src

LaTeX preview and prettify highlight LaTeX fragment.
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(native script entities))
(use-package! org-latex-preview
  :after org
  :hook ((org-mode . org-latex-preview-auto-mode))
  :config
  (pushnew! org-latex-preview--ignored-faces 'org-list-dt 'fixed-pitch)
  (setq org-latex-preview-numbered     t
        org-startup-with-latex-preview t
        org-latex-preview-width 0.6
        org-latex-preview-processing-indicator 'face
        ;;live previewing
        org-latex-preview-live-preview-fragments t
        org-latex-preview-auto-generate 'live
        org-latex-preview-debounce 0.5
        org-latex-preview-throttle 0.2
        org-latex-preview-live-preview-fragments nil
        ;;previewing preamble
        org-latex-preview-preamble
        "\\documentclass{article}\n[DEFAULT-PACKAGES]\n[PACKAGES]
\\usepackage[dvipsnames,svgnames]{xcolor}
\\usepackage[sfdefault]{AlegreyaSans}
\\usepackage{newtxsf}
\\usepackage{amsmath}

\\definecolor{DarkRed}{RGB}{204,36,29}
\\definecolor{ForestGreen}{RGB}{184,187,38}
\\definecolor{red}{RGB}{251,73,52}
\\definecolor{orange}{RGB}{254,128,25}
\\definecolor{blue}{RGB}{69,133,136}
\\definecolor{green}{RGB}{184,187,38}
\\definecolor{yellow}{RGB}{250, 189, 47}
\\definecolor{purple}{RGB}{211, 134, 155}
"))
;; (use-package! org-latex-impatient
;;   :defer t
;;   :hook (org-mode . org-latex-impatient-mode)
;;   :init
;;   (setq org-latex-impatient-tex2svg-bin
;;         "~/mathjax-node-cli/bin/tex2svg"))
#+end_src


Transparent background for org-block. Calibrate fragment based on the TeX font
and org-buffer.
#+begin_src emacs-lisp
(after! org-src
  (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t))))
(plist-put org-latex-preview-options :background "Transparent")
(plist-put org-latex-preview-options :zoom 0.93)
#+end_src

Here we go.
***  Org-export
**** General
#+begin_src emacs-lisp
(use-package! ox
  :config
  (setq org-export-with-tags nil)
  ;; Auto export acronyms as small caps
  ;; Copied from tecosaur
  (defun org-latex-substitute-verb-with-texttt (content)
    "Replace instances of \\verb with \\texttt{}."
    (replace-regexp-in-string
     "\\\\verb\\(.\\).+?\\1"
     (lambda (verb-string)
       (replace-regexp-in-string
        "\\\\" "\\\\\\\\" ; Why elisp, why?
        (org-latex--text-markup (substring verb-string 6 -1) 'code '(:latex-text-markup-alist ((code . protectedtexttt))))))
     content))

  (defun org-export-filter-text-acronym (text backend _info)
    "Wrap suspected acronyms in acronyms-specific formatting.
Treat sequences of 2+ capital letters (optionally succeeded by \"s\") as an acronym.
Ignore if preceeded by \";\" (for manual prevention) or \"\\\" (for LaTeX commands).

TODO abstract backend implementations."
    (let ((base-backend
           (cond
            ;; ((org-export-derived-backend-p backend 'latex) 'latex)
            ((org-export-derived-backend-p backend 'html) 'html)))
          (case-fold-search nil))
      (when base-backend
        (replace-regexp-in-string
         "[;\\\\]?\\b[A-Z][A-Z]+s?\\(?:[^A-Za-z]\\|\\b\\)"
         (lambda (all-caps-str)
           (cond ((equal (aref all-caps-str 0) ?\\) all-caps-str)                ; don't format LaTeX commands
                 ((equal (aref all-caps-str 0) ?\;) (substring all-caps-str 1))  ; just remove not-acronym indicator char ";"
                 (t (let* ((final-char (if (string-match-p "[^A-Za-z]" (substring all-caps-str -1 (length all-caps-str)))
                                           (substring all-caps-str -1 (length all-caps-str))
                                         nil)) ; needed to re-insert the [^A-Za-z] at the end
                           (trailing-s (equal (aref all-caps-str (- (length all-caps-str) (if final-char 2 1))) ?s))
                           (acr (if final-char
                                    (substring all-caps-str 0 (if trailing-s -2 -1))
                                  (substring all-caps-str 0 (+ (if trailing-s -1 (length all-caps-str)))))))
                      (pcase base-backend
                        ('latex (concat "\\acr{" (s-downcase acr) "}" (when trailing-s "\\acrs{}") final-char))
                        ('html (concat "<span class='smallcap'>" (s-downcase acr) "</span>" (when trailing-s "<small>s</small>") final-char)))))))
         text t t))))

  (add-to-list 'org-export-filter-plain-text-functions
               #'org-export-filter-text-acronym)

  ;; We won't use `org-export-filter-headline-functions' because it
  ;; passes (and formats) the entire section contents. That's no good.

  (defun org-html-format-headline-acronymised (todo todo-type priority text tags info)
    "Like `org-html-format-headline-default-function', but with acronym formatting."
    (org-html-format-headline-default-function
     todo todo-type priority (org-export-filter-text-acronym text 'html info) tags info))
  (setq org-html-format-headline-function #'org-html-format-headline-acronymised)

  ;; (defun org-latex-format-headline-acronymised (todo todo-type priority text tags info)
  ;;   "Like `org-latex-format-headline-default-function', but with acronym formatting."
  ;;   (org-latex-format-headline-default-function
  ;;    todo todo-type priority (org-latex-substitute-verb-with-texttt
  ;;                             (org-export-filter-text-acronym text 'latex info)) tags info))
  ;; (setq org-latex-format-headline-function #'org-latex-format-headline-acronymised)
  )
#+end_src
This allows ignoring headlines with tag =:ignore=.
#+begin_src emacs-lisp
(use-package! ox-extra
  :config
  (ox-extras-activate '(ignore-headlines)))
#+end_src
**** Export to LaTeX
#+begin_src emacs-lisp
(use-package! ox-latex
  :config

  (setq org-latex-pdf-process
       '("latexmk -pdflatex='%latex -shell-escape -bibtex -interaction=nonstopmode' -pdf -output-directory=%o -f %f"))

  ;; Default packages
  (setq org-export-headline-levels 5
        org-latex-default-packages-alist
        '(("AUTO" "inputenc" t ("pdflatex"))
          ("T1" "fontenc" t ("pdflatex"))
          ;;Microtype
          ;;- pdflatex: full microtype features, fast, however no fontspec
          ;;- lualatex: good microtype feature support, however slow to compile
          ;;- xelatex: only protrusion support, fast compilation
          ("activate={true,nocompatibility},final,tracking=true,kerning=true,spacing=true,factor=1100,stretch=10,shrink=10"
           "microtype" nil ("pdflatex"))
          ("activate={true,nocompatibility},final,tracking=true,factor=1100,stretch=10,shrink=10"
           "microtype" nil ("lualatex"))
          ("protrusion={true,nocompatibility},final,factor=1100,stretch=10,shrink=10"
           "microtype" nil ("xelatex"))
          ("dvipsnames,svgnames" "xcolor" nil)
          ("colorlinks=true, linkcolor=DarkBlue, citecolor=BrickRed, urlcolor=DarkGreen" "hyperref" nil))))

(after! ox
  ;; Add KOMA-scripts classes to org export
  (add-to-list 'org-latex-classes
               '("koma-letter" "\\documentclass[11pt]{scrletter}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("koma-article" "\\documentclass[11pt]{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("koma-report" "\\documentclass[11pt]{scrreprt}"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("koma-book" "\\documentclass[11pt]{scrbook}"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

(setq org-latex-default-class "koma-article")
#+end_src

Org-mode provide its own highlighting backend -- =engraved= -- which translates
Emacs’ font-lock overlays to LaTeX, results in much better color schemes and
“smarter” syntax highlighting, as this potentially works with the Language
Server Protocol and tree-sitter.
#+begin_src emacs-lisp
(after! ox-latex
  (setq org-latex-src-block-backend 'engraved))
#+end_src

